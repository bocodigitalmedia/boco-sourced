// Generated by CoffeeScript 1.6.3
(function() {
  var MemoryStorage, RevisionConflict, RevisionOutOfSequence,
    __hasProp = {}.hasOwnProperty;

  RevisionConflict = require('./RevisionConflict');

  RevisionOutOfSequence = require('./RevisionOutOfSequence');

  MemoryStorage = (function() {
    function MemoryStorage(props) {
      if (props == null) {
        props = {};
      }
      this.collection = props.collection;
      this.setDefaults();
    }

    MemoryStorage.prototype.setDefaults = function() {
      return this.collection != null ? this.collection : this.collection = {};
    };

    MemoryStorage.prototype.findRevisions = function(type, id, callback) {
      var key, rev, revisions, _ref;
      revisions = [];
      _ref = this.collection;
      for (key in _ref) {
        if (!__hasProp.call(_ref, key)) continue;
        rev = _ref[key];
        if (rev.resourceId === id) {
          revisions.push(rev);
        }
      }
      return callback(null, revisions);
    };

    MemoryStorage.prototype.createRevisionId = function(rev) {
      return [rev.resourceType, rev.resourceId, rev.resourceVersion].join(',');
    };

    MemoryStorage.prototype.exists = function(revisionId) {
      return this.collection.hasOwnProperty(revisionId);
    };

    MemoryStorage.prototype.isOutOfSequence = function(revision) {
      var previousId;
      if (revision.resourceVersion === 0) {
        return false;
      }
      previousId = this.createRevisionId({
        resourceType: revision.resourceType,
        resourceId: revision.resourceId,
        resourceVersion: revision.resourceVersion - 1
      });
      return !this.exists(previousId);
    };

    MemoryStorage.prototype.storeRevision = function(revision, callback) {
      var error, revisionId;
      revisionId = this.createRevisionId(revision);
      if (this.exists(revisionId)) {
        error = new RevisionConflict();
        return callback(error);
      }
      if (this.isOutOfSequence(revision)) {
        error = new RevisionOutOfSequence();
        return callback(error);
      }
      this.collection[revisionId] = revision;
      return callback();
    };

    return MemoryStorage;

  })();

  module.exports = MemoryStorage;

}).call(this);

/*
//@ sourceMappingURL=MemoryStorage.map
*/
